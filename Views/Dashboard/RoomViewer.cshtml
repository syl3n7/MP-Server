@model string
@{
    ViewData["Title"] = "3D Room Viewer";
}

<div class="row">
    <div class="col-md-12">
        <h2>3D Room Viewer - @ViewBag.RoomName</h2>
        <p>Room ID: @Model</p>
        
        <div class="card">
            <div class="card-header">
                <div class="float-start">
                    <h5>Live View</h5>
                </div>
                <div class="float-end">
                    <button id="toggleFullscreen" class="btn btn-sm btn-outline-primary">Fullscreen</button>
                    <button id="resetCamera" class="btn btn-sm btn-outline-secondary">Reset Camera</button>
                </div>
            </div>
            <div class="card-body">
                <div id="viewer-container" style="width: 100%; height: 600px; position: relative;">
                    <div id="loading-overlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); color: white; display: flex; justify-content: center; align-items: center; z-index: 100;">
                        <div>
                            <h3>Loading 3D viewer...</h3>
                            <div class="spinner-border text-light" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="map-select">Select Map:</label>
                            <select id="map-select" class="form-control">
                                <option value="">Default Track</option>
                                <!-- Will be populated based on available maps -->
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check mt-4">
                            <input class="form-check-input" type="checkbox" id="auto-follow" value="true">
                            <label class="form-check-label" for="auto-follow">
                                Auto-follow leading player
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card mt-3">
            <div class="card-header">
                <h5>Player List</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Position</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="player-list">
                            <!-- Will be populated with JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Required libraries for 3D rendering -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/loaders/OBJLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/loaders/FBXLoader.js"></script>
    
    <!-- Our custom 3D viewer script -->
    <script src="/js/3dviewer.js"></script>
    
    <script>
        // Current room ID from model
        const roomId = '@Model';
        
        document.addEventListener('DOMContentLoaded', function() {
            // Hide loading overlay once everything is loaded
            setTimeout(() => {
                document.getElementById('loading-overlay').style.display = 'none';
            }, 1000);
            
            // Initialize 3D viewer
            initViewer('viewer-container', roomId);
            
            // Load default map
            loadMapModel('/models/default-track.glb');
            
            // Map selector change handler
            document.getElementById('map-select').addEventListener('change', function() {
                if (this.value) {
                    loadMapModel(this.value);
                } else {
                    loadMapModel('/models/default-track.glb');
                }
            });
            
            // Reset camera button
            document.getElementById('resetCamera').addEventListener('click', function() {
                if (camera) {
                    camera.position.set(0, 50, 100);
                    camera.lookAt(0, 0, 0);
                }
            });
            
            // Fullscreen button
            document.getElementById('toggleFullscreen').addEventListener('click', function() {
                const container = document.getElementById('viewer-container');
                
                if (!document.fullscreenElement) {
                    container.requestFullscreen().catch(err => {
                        console.error(`Error attempting to enable fullscreen: ${err.message}`);
                    });
                } else {
                    document.exitFullscreen();
                }
            });
            
            // Update player list
            updatePlayerList();
        });
        
        // Function to update player list in the UI
        async function updatePlayerList() {
            try {
                const response = await fetch(`/api/RoomData/room/${roomId}/players`);
                
                if (response.ok) {
                    const players = await response.json();
                    const playerListElement = document.getElementById('player-list');
                    playerListElement.innerHTML = '';
                    
                    players.forEach(player => {
                        const row = document.createElement('tr');
                        
                        // Name column
                        const nameCell = document.createElement('td');
                        nameCell.textContent = player.name;
                        row.appendChild(nameCell);
                        
                        // Position column
                        const posCell = document.createElement('td');
                        posCell.textContent = `X: ${player.position.x.toFixed(2)}, Y: ${player.position.y.toFixed(2)}, Z: ${player.position.z.toFixed(2)}`;
                        row.appendChild(posCell);
                        
                        // Actions column
                        const actionsCell = document.createElement('td');
                        const followBtn = document.createElement('button');
                        followBtn.className = 'btn btn-sm btn-outline-primary';
                        followBtn.textContent = 'Follow';
                        followBtn.addEventListener('click', () => {
                            // Find the player's model and focus camera on it
                            const model = playerModels[player.id];
                            if (model && camera) {
                                // Position camera behind and slightly above player
                                const target = new THREE.Vector3(
                                    model.position.x - 10 * Math.sin(model.rotation.y),
                                    model.position.y + 5,
                                    model.position.z - 10 * Math.cos(model.rotation.y)
                                );
                                camera.position.copy(target);
                                camera.lookAt(model.position);
                            }
                        });
                        actionsCell.appendChild(followBtn);
                        row.appendChild(actionsCell);
                        
                        playerListElement.appendChild(row);
                    });
                }
            } catch (err) {
                console.error('Error fetching player list:', err);
            }
            
            // Update every 2 seconds
            setTimeout(updatePlayerList, 2000);
        }
    </script>
}