@{
    ViewData["Title"] = "Racing Server Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
    <style>
        body {
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }
        .dashboard-card {
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .card-header {
            font-weight: bold;
            background-color: #f8f9fa;
        }
        .refresh-button {
            margin-bottom: 20px;
        }
        .stats-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 20px;
        }
        .stat-card {
            flex: 1;
            min-width: 150px;
            padding: 15px;
            border-radius: 8px;
            background-color: #f8f9fa;
            box-shadow: 0 0 5px rgba(0,0,0,0.05);
            text-align: center;
        }
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
        }
        .stat-label {
            font-size: 14px;
            color: #6c757d;
        }
        .table-responsive {
            margin-bottom: 0;
        }
        .active-badge {
            background-color: #28a745;
            color: white;
        }
        .inactive-badge {
            background-color: #6c757d;
            color: white;
        }
        .admin-section {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .admin-title {
            font-weight: bold;
            margin-bottom: 15px;
            color: #dc3545;
        }
        .admin-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 10px;
        }
        .btn-danger {
            margin-right: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mb-4">@ViewData["Title"]</h1>
        
        <button id="refreshButton" class="btn btn-primary refresh-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z"/>
                <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466"/>
            </svg>
            Refresh Data
        </button>
        
        <div class="admin-section">
            <h2 class="admin-title">Admin Controls</h2>
            <div class="admin-buttons">
                <button id="closeAllRoomsButton" class="btn btn-danger">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
                    </svg>
                    Close All Rooms
                </button>
                <button id="disconnectAllButton" class="btn btn-danger">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-x" viewBox="0 0 16 16">
                        <path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0M8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4m.256 7a4.5 4.5 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1z"/>
                        <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7m-.646-4.854.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 .708-.708"/>
                    </svg>
                    Disconnect All Players
                </button>
            </div>
            <div id="selectedItemActions" style="display: none;">
                <h5>Selected Item Actions:</h5>
                <div class="admin-buttons" id="itemActionButtons">
                    <!-- Action buttons will be added here dynamically -->
                </div>
            </div>
        </div>
        
        <div class="stats-container" id="statsContainer">
            <!-- Stats cards will be inserted here -->
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <div class="card dashboard-card">
                    <div class="card-header">Active Rooms</div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="roomsTable">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Players</th>
                                        <th>Status</th>
                                        <th>Age</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Room data will be inserted here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card dashboard-card">
                    <div class="card-header">Active Sessions</div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="sessionsTable">
                                <thead>
                                    <tr>
                                        <th>Player</th>
                                        <th>Room</th>
                                        <th>Last Activity</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Session data will be inserted here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            // Load data on page load
            loadAllData();
            
            // Set up auto-refresh every 10 seconds
            setInterval(loadAllData, 10000);
            
            // Manual refresh button
            $("#refreshButton").click(function() {
                loadAllData();
            });

            // Admin buttons
            $("#closeAllRoomsButton").click(function() {
                if (confirm("Are you sure you want to close all rooms?")) {
                    $.post("/Dashboard/CloseAllRooms", function(data) {
                        alert(data.message);
                        loadAllData();
                    });
                }
            });
            
            $("#disconnectAllButton").click(function() {
                if (confirm("Are you sure you want to disconnect all players?")) {
                    $.post("/Dashboard/DisconnectAllPlayers", function(data) {
                        alert(data.message);
                        loadAllData();
                    });
                }
            });
            
            function loadAllData() {
                loadStats();
                loadRooms();
                loadSessions();
            }
            
            function loadStats() {
                $.getJSON("/Dashboard/GetStats", function(data) {
                    // Format uptime nicely
                    let uptimeStr = formatTimeSpan(data.uptime);
                    
                    // Clear and rebuild stats container
                    $("#statsContainer").empty();
                    
                    // Add stat cards
                    $("#statsContainer").append(createStatCard("Server Uptime", uptimeStr));
                    $("#statsContainer").append(createStatCard("Active Sessions", data.activeSessions));
                    $("#statsContainer").append(createStatCard("Total Rooms", data.totalRooms));
                    $("#statsContainer").append(createStatCard("Active Games", data.activeGames));
                    $("#statsContainer").append(createStatCard("Players In Rooms", data.playersInRooms));
                });
            }
            
            function createStatCard(label, value) {
                return `<div class="stat-card">
                    <div class="stat-value">${value}</div>
                    <div class="stat-label">${label}</div>
                </div>`;
            }
            
            function loadRooms() {
                $.getJSON("/Dashboard/GetRooms", function(data) {
                    let tbody = $("#roomsTable tbody");
                    tbody.empty();
                    
                    if (data.length === 0) {
                        tbody.append('<tr><td colspan="5" class="text-center">No rooms available</td></tr>');
                        return;
                    }
                    
                    data.forEach(function(room) {
                        let age = getTimeAgo(new Date(room.createdAt));
                        let statusBadge = room.isActive 
                            ? '<span class="badge active-badge">Active</span>' 
                            : '<span class="badge inactive-badge">Lobby</span>';
                            
                        tbody.append(`<tr data-id="${room.id}" data-type="room">
                            <td>${escapeHtml(room.name)}</td>
                            <td>${room.playerCount}</td>
                            <td>${statusBadge}</td>
                            <td>${age}</td>
                            <td>
                                <button class="btn btn-sm btn-danger closeRoomBtn" data-id="${room.id}">Close</button>
                            </td>
                        </tr>`);
                    });
                    
                    // Add event handlers for room actions
                    $(".closeRoomBtn").click(function() {
                        const roomId = $(this).data("id");
                        if (confirm("Are you sure you want to close this room?")) {
                            $.post("/Dashboard/CloseRoom", { roomId: roomId }, function(data) {
                                alert(data.message);
                                loadAllData();
                            });
                        }
                    });
                    
                    // Add row click handler for room selection
                    $("#roomsTable tbody tr").click(function() {
                        $("#roomsTable tbody tr").removeClass("table-primary");
                        $(this).addClass("table-primary");
                        
                        const roomId = $(this).data("id");
                        showItemActions("room", roomId);
                    });
                });
            }
            
            function loadSessions() {
                $.getJSON("/Dashboard/GetSessions", function(data) {
                    let tbody = $("#sessionsTable tbody");
                    tbody.empty();
                    
                    if (data.length === 0) {
                        tbody.append('<tr><td colspan="4" class="text-center">No active sessions</td></tr>');
                        return;
                    }
                    
                    data.forEach(function(session) {
                        let lastActivity = getTimeAgo(new Date(session.lastActivity));
                        let roomDisplay = session.currentRoomId ? session.currentRoomId : 'None';
                        
                        tbody.append(`<tr data-id="${session.id}" data-type="session">
                            <td>${escapeHtml(session.name)}</td>
                            <td>${escapeHtml(roomDisplay)}</td>
                            <td>${lastActivity}</td>
                            <td>
                                <button class="btn btn-sm btn-danger disconnectBtn" data-id="${session.id}">Disconnect</button>
                            </td>
                        </tr>`);
                    });
                    
                    // Add event handlers for session actions
                    $(".disconnectBtn").click(function() {
                        const sessionId = $(this).data("id");
                        if (confirm("Are you sure you want to disconnect this player?")) {
                            $.post("/Dashboard/DisconnectPlayer", { sessionId: sessionId }, function(data) {
                                alert(data.message);
                                loadAllData();
                            });
                        }
                    });
                    
                    // Add row click handler for session selection
                    $("#sessionsTable tbody tr").click(function() {
                        $("#sessionsTable tbody tr").removeClass("table-primary");
                        $(this).addClass("table-primary");
                        
                        const sessionId = $(this).data("id");
                        showItemActions("session", sessionId);
                    });
                });
            }
            
            function showItemActions(type, id) {
                $("#selectedItemActions").show();
                $("#itemActionButtons").empty();
                
                if (type === "room") {
                    $("#itemActionButtons").append(`
                        <button class="btn btn-warning" id="closeRoomBtn">Close Room</button>
                    `);
                    
                    $("#closeRoomBtn").click(function() {
                        if (confirm("Are you sure you want to close this room?")) {
                            $.post("/Dashboard/CloseRoom", { roomId: id }, function(data) {
                                alert(data.message);
                                loadAllData();
                            });
                        }
                    });
                } else if (type === "session") {
                    $("#itemActionButtons").append(`
                        <button class="btn btn-warning" id="disconnectPlayerBtn">Disconnect Player</button>
                    `);
                    
                    $("#disconnectPlayerBtn").click(function() {
                        if (confirm("Are you sure you want to disconnect this player?")) {
                            $.post("/Dashboard/DisconnectPlayer", { sessionId: id }, function(data) {
                                alert(data.message);
                                loadAllData();
                            });
                        }
                    });
                }
            }
            
            function formatTimeSpan(timeString) {
                // Parse ISO 8601 duration format
                const matches = timeString.match(/P(?:(\d+)D)?T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)(?:\.\d+)?S)?/);
                if (!matches) {
                    return timeString;
                }
                
                const days = matches[1] ? parseInt(matches[1]) : 0;
                const hours = matches[2] ? parseInt(matches[2]) : 0;
                const minutes = matches[3] ? parseInt(matches[3]) : 0;
                const seconds = matches[4] ? parseInt(matches[4]) : 0;
                
                // Format parts that exist
                let parts = [];
                if (days > 0) parts.push(`${days}d`);
                if (hours > 0) parts.push(`${hours}h`);
                if (minutes > 0) parts.push(`${minutes}m`);
                if (seconds > 0 || parts.length === 0) parts.push(`${seconds}s`);
                
                return parts.join(' ');
            }
            
            function getTimeAgo(date) {
                const now = new Date();
                const diffMs = now - date;
                const diffSec = Math.floor(diffMs / 1000);
                
                if (diffSec < 60) return `${diffSec}s ago`;
                if (diffSec < 3600) return `${Math.floor(diffSec / 60)}m ago`;
                if (diffSec < 86400) return `${Math.floor(diffSec / 3600)}h ago`;
                return `${Math.floor(diffSec / 86400)}d ago`;
            }
            
            function escapeHtml(text) {
                return text
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }
        });
    </script>
</body>
</html>