@{
    ViewData["Title"] = "Racing Server Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
    <style>
        body {
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }
        .dashboard-card {
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .card-header {
            font-weight: bold;
            background-color: #f8f9fa;
        }
        .refresh-button {
            margin-bottom: 20px;
        }
        .stats-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 20px;
        }
        .stat-card {
            flex: 1;
            min-width: 150px;
            padding: 15px;
            border-radius: 8px;
            background-color: #f8f9fa;
            box-shadow: 0 0 5px rgba(0,0,0,0.05);
            text-align: center;
        }
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
        }
        .stat-label {
            font-size: 14px;
            color: #6c757d;
        }
        .table-responsive {
            margin-bottom: 0;
        }
        .active-badge {
            background-color: #28a745;
            color: white;
        }
        .inactive-badge {
            background-color: #6c757d;
            color: white;
        }
        .admin-section {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .admin-title {
            font-weight: bold;
            margin-bottom: 15px;
            color: #dc3545;
        }
        .admin-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 10px;
        }
        .btn-danger {
            margin-right: 5px;
        }
        .security-section {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .security-title {
            font-weight: bold;
            margin-bottom: 15px;
            color: #856404;
        }
        .threat-level-0 { color: #28a745; }
        .threat-level-1 { color: #ffc107; }
        .threat-level-2 { color: #fd7e14; }
        .threat-level-3 { color: #dc3545; }
        .security-metric {
            display: inline-block;
            margin-right: 15px;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }
        .security-metric.low { background-color: #d4edda; color: #155724; }
        .security-metric.medium { background-color: #fff3cd; color: #856404; }
        .security-metric.high { background-color: #f8d7da; color: #721c24; }
        .security-tab {
            display: none;
        }
        .security-tab.active {
            display: block;
        }
        .nav-tabs .nav-link.active {
            background-color: #fff3cd;
            border-color: #ffeaa7;
            color: #856404;
        }
        .event-timestamp {
            font-size: 11px;
            color: #6c757d;
        }
        .severity-1 { color: #6c757d; }
        .severity-2 { color: #17a2b8; }
        .severity-3 { color: #ffc107; }
        .severity-4 { color: #fd7e14; }
        .severity-5 { color: #dc3545; }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mb-4">@ViewData["Title"]</h1>
        
        <button id="refreshButton" class="btn btn-primary refresh-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z"/>
                <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466"/>
            </svg>
            Refresh Data
        </button>
        
        <!-- Server Management Section -->
        <div class="admin-section">
            <h2 class="admin-title">🚀 Server Management</h2>
            
            <!-- Server Status -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="stat-card">
                        <div class="stat-value" id="serverStatus">Loading...</div>
                        <div class="stat-label">Server Status</div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="stat-card">
                        <div class="stat-value" id="serverUptime">-</div>
                        <div class="stat-label">Server Uptime</div>
                    </div>
                </div>
            </div>
            
            <!-- Server Configuration -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0">Server Configuration</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="tcpPort" class="form-label">TCP Port</label>
                                <input type="number" class="form-control" id="tcpPort" value="443" min="1" max="65535">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="udpPort" class="form-label">UDP Port</label>
                                <input type="number" class="form-control" id="udpPort" value="443" min="1" max="65535">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check" style="margin-top: 32px;">
                                <input class="form-check-input" type="checkbox" id="useTls" checked>
                                <label class="form-check-label" for="useTls">
                                    Use TLS/SSL
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> 
                        Database configuration is loaded from <code>appsettings.json</code>
                    </div>
                </div>
            </div>
            
            <!-- Server Controls -->
            <div class="admin-buttons">
                <button id="startServerButton" class="btn btn-success">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                        <path d="M6.271 5.055a.5.5 0 0 1 .52.038L11 7.055a.5.5 0 0 1 0 .89L6.791 9.907a.5.5 0 0 1-.791-.39V5.383a.5.5 0 0 1 .271-.328"/>
                    </svg>
                    Start Server
                </button>
                <button id="stopServerButton" class="btn btn-danger" disabled>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stop-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                        <path d="M5 6.5A1.5 1.5 0 0 1 6.5 5h3A1.5 1.5 0 0 1 11 6.5v3A1.5 1.5 0 0 1 9.5 11h-3A1.5 1.5 0 0 1 5 9.5z"/>
                    </svg>
                    Stop Server
                </button>
            </div>
            
            <div id="serverOperationResult" class="mt-3"></div>
        </div>
        
        <div class="admin-section">
            <h2 class="admin-title">Admin Controls</h2>
            <div class="admin-buttons">
                <button id="closeAllRoomsButton" class="btn btn-danger">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
                    </svg>
                    Close All Rooms
                </button>
                <button id="disconnectAllButton" class="btn btn-danger">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-x" viewBox="0 0 16 16">
                        <path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0M8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4m.256 7a4.5 4.5 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1z"/>
                        <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7m-.646-4.854.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 .708-.708"/>
                    </svg>
                    Disconnect All Players
                </button>
            </div>
            <div id="selectedItemActions" style="display: none;">
                <h5>Selected Item Actions:</h5>
                <div class="admin-buttons" id="itemActionButtons">
                    <!-- Action buttons will be added here dynamically -->
                </div>
            </div>
        </div>
        
        <!-- Logging Section -->
        <div class="admin-section">
            <h2 class="admin-title">📝 Server Logs</h2>
            <div class="admin-buttons">
                <button id="refreshLogsBtn" class="btn btn-primary me-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z"/>
                        <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466"/>
                    </svg>
                    Refresh Logs
                </button>
                <button id="exportLogsBtn" class="btn btn-outline-primary me-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
                        <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5"/>
                        <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708z"/>
                    </svg>
                    Export Logs
                </button>
                <button id="clearOldLogsBtn" class="btn btn-outline-warning">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84L14.962 3.5h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5"/>
                    </svg>
                    Clear Old Logs
                </button>
            </div>
            
            <!-- Log Navigation Tabs -->
            <ul class="nav nav-tabs mt-3" id="logTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="server-logs-tab" data-bs-toggle="tab" data-bs-target="#server-logs" type="button" role="tab">
                        Server Logs <span id="serverLogCount" class="badge bg-secondary ms-1">0</span>
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="connection-logs-tab" data-bs-toggle="tab" data-bs-target="#connection-logs" type="button" role="tab">
                        Connections <span id="connectionLogCount" class="badge bg-info ms-1">0</span>
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="security-logs-tab" data-bs-toggle="tab" data-bs-target="#security-logs" type="button" role="tab">
                        Security <span id="securityLogCount" class="badge bg-danger ms-1">0</span>
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="room-logs-tab" data-bs-toggle="tab" data-bs-target="#room-logs" type="button" role="tab">
                        Room Activity <span id="roomLogCount" class="badge bg-success ms-1">0</span>
                    </button>
                </li>
            </ul>
            
            <!-- Log Content Tabs -->
            <div class="tab-content mt-3" id="logTabContent">
                <div class="tab-pane fade show active" id="server-logs" role="tabpanel">
                    <div class="mb-3">
                        <div class="row">
                            <div class="col-md-4">
                                <select id="logLevelFilter" class="form-select">
                                    <option value="">All Levels</option>
                                    <option value="Debug">Debug</option>
                                    <option value="Info">Info</option>
                                    <option value="Warning">Warning</option>
                                    <option value="Error">Error</option>
                                    <option value="Critical">Critical</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <select id="logCategoryFilter" class="form-select">
                                    <option value="">All Categories</option>
                                    <option value="RacingServer">Racing Server</option>
                                    <option value="PlayerSession">Player Session</option>
                                    <option value="Security">Security</option>
                                    <option value="GameRoom">Game Room</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <button id="applyServerLogFilters" class="btn btn-outline-primary">Apply Filters</button>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                        <table class="table table-striped table-sm">
                            <thead class="table-dark sticky-top">
                                <tr>
                                    <th style="width: 150px;">Time</th>
                                    <th style="width: 80px;">Level</th>
                                    <th style="width: 120px;">Category</th>
                                    <th>Message</th>
                                    <th style="width: 100px;">Player</th>
                                    <th style="width: 120px;">IP</th>
                                </tr>
                            </thead>
                            <tbody id="serverLogsTableBody">
                                <tr><td colspan="6" class="text-center">Loading...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <div class="tab-pane fade" id="connection-logs" role="tabpanel">
                    <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                        <table class="table table-striped table-sm">
                            <thead class="table-dark sticky-top">
                                <tr>
                                    <th style="width: 150px;">Time</th>
                                    <th style="width: 100px;">Event</th>
                                    <th>Player</th>
                                    <th style="width: 120px;">IP Address</th>
                                    <th style="width: 80px;">Type</th>
                                    <th style="width: 60px;">TLS</th>
                                    <th style="width: 80px;">Duration</th>
                                </tr>
                            </thead>
                            <tbody id="connectionLogsTableBody">
                                <tr><td colspan="7" class="text-center">Loading...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <div class="tab-pane fade" id="security-logs" role="tabpanel">
                    <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                        <table class="table table-striped table-sm">
                            <thead class="table-dark sticky-top">
                                <tr>
                                    <th style="width: 150px;">Time</th>
                                    <th style="width: 120px;">Event Type</th>
                                    <th style="width: 80px;">Severity</th>
                                    <th style="width: 120px;">IP Address</th>
                                    <th style="width: 100px;">Player</th>
                                    <th>Description</th>
                                    <th style="width: 80px;">Status</th>
                                </tr>
                            </thead>
                            <tbody id="securityLogsTableBody">
                                <tr><td colspan="7" class="text-center">Loading...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <div class="tab-pane fade" id="room-logs" role="tabpanel">
                    <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                        <table class="table table-striped table-sm">
                            <thead class="table-dark sticky-top">
                                <tr>
                                    <th style="width: 150px;">Time</th>
                                    <th style="width: 150px;">Room</th>
                                    <th style="width: 120px;">Event</th>
                                    <th style="width: 100px;">Player</th>
                                    <th style="width: 80px;">Player Count</th>
                                    <th>Details</th>
                                </tr>
                            </thead>
                            <tbody id="roomLogsTableBody">
                                <tr><td colspan="6" class="text-center">Loading...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="stats-container" id="statsContainer">
            <!-- Stats cards will be inserted here -->
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <div class="card dashboard-card">
                    <div class="card-header">Active Rooms</div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="roomsTable">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Players</th>
                                        <th>Status</th>
                                        <th>Age</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Room data will be inserted here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card dashboard-card">
                    <div class="card-header">Active Sessions</div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="sessionsTable">
                                <thead>
                                    <tr>
                                        <th>Player</th>
                                        <th>Room</th>
                                        <th>Last Activity</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Session data will be inserted here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function() {
            console.log("Document ready, initializing dashboard...");
            console.log("jQuery version:", $.fn.jquery);
            console.log("Server status element exists:", $("#serverStatus").length > 0);
            console.log("Start button exists:", $("#startServerButton").length > 0);
            
            // User management variables - MOVED TO TOP
            let currentUserPage = 1;
            let totalUserPages = 1;
            let usersPerPage = 20;
            
            // Logging functionality
            let currentLogType = 'server';
            
            // Load data on page load
            loadAllData();
            
            // Set up auto-refresh every 10 seconds
            setInterval(loadAllData, 10000);
            console.log("Auto-refresh set up for every 10 seconds");
            
            // Manual refresh button
            $("#refreshButton").click(function() {
                console.log("Manual refresh button clicked");
                loadAllData();
            });

            // Security tab switching
            $("#securityTabs button[data-tab]").click(function() {
                const targetTab = $(this).data("tab");
                
                // Update tab appearance
                $("#securityTabs button").removeClass("active");
                $(this).addClass("active");
                
                // Show/hide tab content
                $(".security-tab").removeClass("show active");
                $(`#${targetTab}`).addClass("show active");
            });

            // Admin buttons
            $("#closeAllRoomsButton").click(function() {
                if (confirm("Are you sure you want to close all rooms?")) {
                    $.post("/Dashboard/CloseAllRooms", function(data) {
                        alert(data.message);
                        loadAllData();
                    });
                }
            });
            
            $("#disconnectAllButton").click(function() {
                if (confirm("Are you sure you want to disconnect all players?")) {
                    $.post("/Dashboard/DisconnectAllPlayers", function(data) {
                        alert(data.message);
                        loadAllData();
                    });
                }
            });
            
            // Server Management buttons
            $("#startServerButton").click(function() {
                console.log("Start server button clicked");
                const config = {
                    tcpPort: parseInt($("#tcpPort").val()) || 443,
                    udpPort: parseInt($("#udpPort").val()) || 443,
                    useTls: $("#useTls").is(':checked')
                };
                
                console.log("Server config:", config);
                $(this).prop('disabled', true).text('Starting...');
                
                $.ajax({
                    url: "/api/ServerManagement/dashboard-start",
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(config),
                    success: function(data) {
                        console.log("Start server response:", data);
                        showServerOperationResult(data.success, data.message);
                        if (data.success) {
                            updateServerControlButtons(true);
                        }
                        loadServerStatus();
                    },
                    error: function(xhr, status, error) {
                        console.error("Start server failed:", status, error);
                        console.error("Response:", xhr.responseText);
                        showServerOperationResult(false, "Failed to start server: " + (xhr.responseJSON?.message || error));
                    },
                    complete: function() {
                        $("#startServerButton").prop('disabled', false).text('Start Server');
                    }
                });
            });
            
            $("#stopServerButton").click(function() {
                if (confirm("Are you sure you want to stop the server? This will disconnect all players.")) {
                    $(this).prop('disabled', true).text('Stopping...');
                    
                    $.post("/api/ServerManagement/dashboard-stop", function(data) {
                        showServerOperationResult(data.success, data.message);
                        if (data.success) {
                            updateServerControlButtons(false);
                        }
                        loadServerStatus();
                    }).fail(function() {
                        showServerOperationResult(false, "Failed to stop server");
                    }).always(function() {
                        $("#stopServerButton").prop('disabled', false).text('Stop Server');
                    });
                }
            });
            
            // User Management Event Handlers
            $("#refreshUsersBtn").click(function() {
                loadUserManagementData();
            });
            
            $("#userSearchInput").on('input', function() {
                const searchTerm = $(this).val().toLowerCase();
                filterUsersTable(searchTerm);
            });
            
            $("#prevUsersPage").click(function() {
                if (currentUserPage > 1) {
                    currentUserPage--;
                    loadUsers();
                }
            });
            
            $("#nextUsersPage").click(function() {
                if (currentUserPage < totalUserPages) {
                    currentUserPage++;
                    loadUsers();
                }
            });
            
            // Load logs when tabs are clicked
            $("#logTabs button").click(function() {
                const targetTab = $(this).attr("data-bs-target");
                if (targetTab) {
                    const logType = targetTab.replace('#', '').replace('-logs', '').replace('-', '');
                    currentLogType = logType;
                    loadLogs(logType);
                }
            });
            
            // Refresh logs button
            $("#refreshLogsBtn").click(function() {
                loadLogs(currentLogType);
            });
            
            // Apply server log filters
            $("#applyServerLogFilters").click(function() {
                loadLogs('server');
            });
            
            // Export logs button
            $("#exportLogsBtn").click(function() {
                showExportModal();
            });
            
            // Clear old logs button
            $("#clearOldLogsBtn").click(function() {
                showClearLogsModal();
            });
            
            function loadAllData() {
                loadServerStatus();
                loadStats();
                loadRooms();
                loadSessions();
                loadSecurityData();
                loadUserManagementData();
            }
            
            function loadStats() {
                $.getJSON("/Dashboard/GetStats", function(data) {
                    if (data.error) {
                        // Server is not running, show default values
                        $("#statsContainer").empty();
                        $("#statsContainer").append(createStatCard("Server Uptime", "Server not running"));
                        $("#statsContainer").append(createStatCard("Active Sessions", "0"));
                        $("#statsContainer").append(createStatCard("Total Rooms", "0"));
                        $("#statsContainer").append(createStatCard("Active Games", "0"));
                        $("#statsContainer").append(createStatCard("Players In Rooms", "0"));
                        return;
                    }
                    
                    // Format uptime nicely
                    let uptimeStr = formatTimeSpan(data.uptime);
                    
                    // Clear and rebuild stats container
                    $("#statsContainer").empty();
                    
                    // Add stat cards
                    $("#statsContainer").append(createStatCard("Server Uptime", uptimeStr));
                    $("#statsContainer").append(createStatCard("Active Sessions", data.activeSessions));
                    $("#statsContainer").append(createStatCard("Total Rooms", data.totalRooms));
                    $("#statsContainer").append(createStatCard("Active Games", data.activeGames));
                    $("#statsContainer").append(createStatCard("Players In Rooms", data.playersInRooms));
                }).fail(function() {
                    // Handle connection error
                    $("#statsContainer").empty();
                    $("#statsContainer").append(createStatCard("Server Status", "Connection Error"));
                });
            }
            
            function createStatCard(label, value) {
                return `<div class="stat-card">
                    <div class="stat-value">${value}</div>
                    <div class="stat-label">${label}</div>
                </div>`;
            }
            
            // Server Management Functions
            function loadServerStatus() {
                console.log("Loading server status...");
                $.getJSON("/api/ServerManagement/dashboard-status", function(data) {
                    console.log("Server status response:", data);
                    console.log("isRunning value:", data.isRunning, "type:", typeof data.isRunning);
                    if (data.isRunning) {
                        console.log("Server is running, updating UI...");
                        $("#serverStatus").text("Running").css("color", "#28a745");
                        $("#serverUptime").text(data.startTime ? getTimeAgo(new Date(data.startTime)) : "-");
                        updateServerControlButtons(true);
                    } else {
                        console.log("Server is stopped, updating UI...");
                        $("#serverStatus").text("Stopped").css("color", "#dc3545");
                        $("#serverUptime").text("-");
                        updateServerControlButtons(false);
                    }
                }).fail(function(xhr, status, error) {
                    console.error("Failed to load server status:", status, error);
                    $("#serverStatus").text("Unknown").css("color", "#6c757d");
                    $("#serverUptime").text("-");
                    updateServerControlButtons(false);
                });
            }
            
            function updateServerControlButtons(isRunning) {
                console.log("Updating server control buttons, isRunning:", isRunning);
                if (isRunning) {
                    $("#startServerButton").prop('disabled', true);
                    $("#stopServerButton").prop('disabled', false);
                    console.log("Start button disabled, stop button enabled");
                } else {
                    $("#startServerButton").prop('disabled', false);
                    $("#stopServerButton").prop('disabled', true);
                    console.log("Start button enabled, stop button disabled");
                }
            }
            
            function showServerOperationResult(success, message) {
                const resultDiv = $("#serverOperationResult");
                resultDiv.empty();
                
                const alertClass = success ? "alert-success" : "alert-danger";
                const icon = success ? "bi-check-circle" : "bi-x-circle";
                
                resultDiv.html(`
                    <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                        <i class="bi ${icon}"></i> ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `);
                
                // Auto-dismiss after 10 seconds
                setTimeout(() => {
                    resultDiv.find('.alert').alert('close');
                }, 10000);
            }
            
            function loadRooms() {
                $.getJSON("/Dashboard/GetRooms", function(data) {
                    console.log("loadRooms received data:", data);
                    let tbody = $("#roomsTable tbody");
                    tbody.empty();
                    
                    if (data.error) {
                        tbody.append('<tr><td colspan="5" class="text-center text-muted">Server not running</td></tr>');
                        return;
                    }
                    
                    if (!Array.isArray(data) || data.length === 0) {
                        tbody.append('<tr><td colspan="5" class="text-center">No rooms available</td></tr>');
                        return;
                    }
                    
                    data.forEach(function(room) {
                        let age = getTimeAgo(new Date(room.createdAt));
                        let statusBadge = room.isActive 
                            ? '<span class="badge active-badge">Active</span>' 
                            : '<span class="badge inactive-badge">Lobby</span>';
                            
                        tbody.append(`<tr data-id="${room.id}" data-type="room">
                            <td>${escapeHtml(room.name)}</td>
                            <td>${room.playerCount}</td>
                            <td>${statusBadge}</td>
                            <td>${age}</td>
                            <td>
                                <button class="btn btn-sm btn-danger closeRoomBtn" data-id="${room.id}">Close</button>
                            </td>
                        </tr>`);
                    });
                    
                    // Add event handlers for room actions
                    $(".closeRoomBtn").click(function() {
                        const roomId = $(this).data("id");
                        if (confirm("Are you sure you want to close this room?")) {
                            $.post("/Dashboard/CloseRoom", { roomId: roomId }, function(data) {
                                alert(data.message);
                                loadAllData();
                            });
                        }
                    });
                    
                    // Add row click handler for room selection
                    $("#roomsTable tbody tr").click(function() {
                        $("#roomsTable tbody tr").removeClass("table-primary");
                        $(this).addClass("table-primary");
                        
                        const roomId = $(this).data("id");
                        showItemActions("room", roomId);
                    });
                });
            }
            
            function loadSessions() {
                $.getJSON("/Dashboard/GetSessions", function(data) {
                    console.log("loadSessions received data:", data);
                    let tbody = $("#sessionsTable tbody");
                    tbody.empty();
                    
                    if (data.error) {
                        tbody.append('<tr><td colspan="4" class="text-center text-muted">Server not running</td></tr>');
                        return;
                    }
                    
                    if (!Array.isArray(data) || data.length === 0) {
                        tbody.append('<tr><td colspan="4" class="text-center">No active sessions</td></tr>');
                        return;
                    }
                    
                    data.forEach(function(session) {
                        let lastActivity = getTimeAgo(new Date(session.lastActivity));
                        let roomDisplay = session.currentRoomId ? session.currentRoomId : 'None';
                        
                        tbody.append(`<tr data-id="${session.id}" data-type="session">
                            <td>${escapeHtml(session.name)}</td>
                            <td>${escapeHtml(roomDisplay)}</td>
                            <td>${lastActivity}</td>
                            <td>
                                <button class="btn btn-sm btn-danger disconnectBtn" data-id="${session.id}">Disconnect</button>
                            </td>
                        </tr>`);
                    });
                    
                    // Add event handlers for session actions
                    $(".disconnectBtn").click(function() {
                        const sessionId = $(this).data("id");
                        if (confirm("Are you sure you want to disconnect this player?")) {
                            $.post("/Dashboard/DisconnectPlayer", { sessionId: sessionId }, function(data) {
                                alert(data.message);
                                loadAllData();
                            });
                        }
                    });
                    
                    // Add row click handler for session selection
                    $("#sessionsTable tbody tr").click(function() {
                        $("#sessionsTable tbody tr").removeClass("table-primary");
                        $(this).addClass("table-primary");
                        
                        const sessionId = $(this).data("id");
                        showItemActions("session", sessionId);
                    });
                });
            }
            
            function loadSecurityData() {
                loadSecurityStats();
                loadSecurityEvents();
                loadPlayerSecurity();
                loadRateLimitData();
            }
            
            function loadSecurityStats() {
                $.getJSON("/Dashboard/GetSecurityStats", function(data) {
                    $("#totalEvents").text(data.totalEvents || 0);
                    $("#recentEvents").text(data.recentEvents || 0);
                    $("#highThreatPlayers").text(data.highThreatPlayers || 0);
                    
                    // Update security status based on recent events and threat levels
                    let status = "🟢"; // Green
                    if (data.highThreatPlayers > 0 || data.recentEvents > 5) {
                        status = "🟡"; // Yellow
                    }
                    if (data.highThreatPlayers > 2 || data.recentEvents > 10) {
                        status = "🔴"; // Red
                    }
                    $("#securityStatus").text(status);
                    
                    // Update event types chart
                    let chartHtml = "";
                    if (data.eventsByType && Object.keys(data.eventsByType).length > 0) {
                        for (const [eventType, count] of Object.entries(data.eventsByType)) {
                            chartHtml += `<span class="security-metric medium">${eventType}: ${count}</span>`;
                        }
                    } else {
                        chartHtml = "<span class='text-muted'>No recent events</span>";
                    }
                    $("#eventTypesChart").html(chartHtml);
                });
            }
            
            function loadSecurityEvents() {
                $.getJSON("/Dashboard/GetSecurityEvents?limit=50", function(data) {
                    console.log("loadSecurityEvents received data:", data);
                    let tbody = $("#securityEventsTable tbody");
                    tbody.empty();
                    
                    if (data.error) {
                        tbody.append('<tr><td colspan="5" class="text-center text-muted">Server not running</td></tr>');
                        return;
                    }
                    
                    if (!Array.isArray(data) || data.length === 0) {
                        tbody.append('<tr><td colspan="5" class="text-center">No security events</td></tr>');
                        return;
                    }
                    
                    data.forEach(function(event) {
                        let timeAgo = getTimeAgo(new Date(event.timestamp));
                        let severityClass = `severity-${event.severity}`;
                        
                        tbody.append(`<tr>
                            <td><span class="event-timestamp">${timeAgo}</span></td>
                            <td><span class="badge bg-secondary">${event.eventType}</span></td>
                            <td>${escapeHtml(event.clientId.substring(0, 8))}...</td>
                            <td>${escapeHtml(event.description)}</td>
                            <td><span class="${severityClass}">●</span> ${event.severity}</td>
                        </tr>`);
                    });
                });
            }
            
            function loadPlayerSecurity() {
                $.getJSON("/Dashboard/GetPlayerSecurityDetails", function(data) {
                    console.log("loadPlayerSecurity received data:", data);
                    let tbody = $("#playerSecurityTable tbody");
                    tbody.empty();
                    
                    if (data.error) {
                        tbody.append('<tr><td colspan="7" class="text-center text-muted">Server not running</td></tr>');
                        return;
                    }
                    
                    if (!Array.isArray(data) || data.length === 0) {
                        tbody.append('<tr><td colspan="7" class="text-center">No players online</td></tr>');
                        return;
                    }
                    
                    data.forEach(function(player) {
                        let threatClass = `threat-level-${player.threatLevel}`;
                        let authBadge = player.isAuthenticated 
                            ? '<span class="badge bg-success">✓</span>' 
                            : '<span class="badge bg-warning">✗</span>';
                        let timeAgo = getTimeAgo(new Date(player.lastActivity));
                        
                        tbody.append(`<tr>
                            <td>${escapeHtml(player.name)}</td>
                            <td><span class="${threatClass}">●</span> ${player.threatLevel}</td>
                            <td>${player.totalViolations}</td>
                            <td>${player.recentViolations}</td>
                            <td>${authBadge}</td>
                            <td>${timeAgo}</td>
                            <td>
                                <button class="btn btn-sm btn-danger banPlayerBtn" data-id="${player.id}" data-name="${escapeHtml(player.name)}">Ban</button>
                            </td>
                        </tr>`);
                    });
                    
                    // Add ban player handlers
                    $(".banPlayerBtn").click(function() {
                        const playerId = $(this).data("id");
                        const playerName = $(this).data("name");
                        const reason = prompt(`Enter ban reason for ${playerName}:`, "Security violation");
                        
                        if (reason && confirm(`Are you sure you want to ban ${playerName}?`)) {
                            $.post("/Dashboard/BanPlayer", { sessionId: playerId, reason: reason }, function(data) {
                                alert(data.message);
                                loadAllData();
                            });
                        }
                    });
                });
            }
            
            function loadRateLimitData() {
                $.getJSON("/Dashboard/GetRateLimitStatus", function(data) {
                    console.log("loadRateLimitData received data:", data);
                    let tbody = $("#rateLimitTable tbody");
                    tbody.empty();
                    
                    if (data.error) {
                        tbody.append('<tr><td colspan="6" class="text-center text-muted">Server not running</td></tr>');
                        return;
                    }
                    
                    if (!Array.isArray(data) || data.length === 0) {
                        tbody.append('<tr><td colspan="6" class="text-center">No active sessions</td></tr>');
                        return;
                    }
                    
                    data.forEach(function(player) {
                        let tcpUsageClass = player.tcpUtilization > 80 ? "high" : player.tcpUtilization > 50 ? "medium" : "low";
                        let udpUsageClass = player.udpUtilization > 80 ? "high" : player.udpUtilization > 50 ? "medium" : "low";
                        let timeAgo = getTimeAgo(new Date(player.lastActivity));
                        
                        tbody.append(`<tr>
                            <td>${escapeHtml(player.playerName)}</td>
                            <td>${player.tcpRate}/${player.tcpLimit}</td>
                            <td>${player.udpRate}/${player.udpLimit}</td>
                            <td><span class="security-metric ${tcpUsageClass}">${player.tcpUtilization}%</span></td>
                            <td><span class="security-metric ${udpUsageClass}">${player.udpUtilization}%</span></td>
                            <td>${timeAgo}</td>
                        </tr>`);
                    });
                });
            }
            
            function showItemActions(type, id) {
                $("#selectedItemActions").show();
                $("#itemActionButtons").empty();
                
                if (type === "room") {
                    $("#itemActionButtons").append(`
                        <button class="btn btn-warning" id="closeRoomBtn">Close Room</button>
                    `);
                    
                    $("#closeRoomBtn").click(function() {
                        if (confirm("Are you sure you want to close this room?")) {
                            $.post("/Dashboard/CloseRoom", { roomId: id }, function(data) {
                                alert(data.message);
                                loadAllData();
                            });
                        }
                    });
                } else if (type === "session") {
                    $("#itemActionButtons").append(`
                        <button class="btn btn-warning" id="disconnectPlayerBtn">Disconnect Player</button>
                    `);
                    
                    $("#disconnectPlayerBtn").click(function() {
                        if (confirm("Are you sure you want to disconnect this player?")) {
                            $.post("/Dashboard/DisconnectPlayer", { sessionId: id }, function(data) {
                                alert(data.message);
                                loadAllData();
                            });
                        }
                    });
                }
            }
            
            function formatTimeSpan(timeString) {
                // The uptime is already formatted as a human-readable string
                return timeString;
            }
            
            function getTimeAgo(date) {
                const now = new Date();
                const diffMs = now - date;
                const diffSec = Math.floor(diffMs / 1000);
                
                if (diffSec < 60) return `${diffSec}s ago`;
                if (diffSec < 3600) return `${Math.floor(diffSec / 60)}m ago`;
                if (diffSec < 86400) return `${Math.floor(diffSec / 3600)}h ago`;
                return `${Math.floor(diffSec / 86400)}d ago`;
            }
            
            function escapeHtml(text) {
                return text
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }
            
            function loadUserManagementData() {
                loadUserStats();
                loadUsers();
                loadOnlineUsers();
            }
            
            function loadUserStats() {
                $.getJSON("/Dashboard/GetUserStats", function(data) {
                    if (data.success) {
                        $("#totalUsers").text(data.data.totalUsers || 0);
                        $("#activeUsers").text(data.data.activeUsers || 0);
                        $("#bannedUsers").text(data.data.bannedUsers || 0);
                    } else {
                        console.error("Failed to load user stats:", data.message);
                    }
                }).fail(function() {
                    console.error("Failed to load user stats");
                });
            }
            
            function loadUsers() {
                $.getJSON(`/Dashboard/GetAllUsers?page=${currentUserPage}&pageSize=${usersPerPage}`, function(data) {
                    if (data.success) {
                        displayUsers(data.data.users);
                        updateUsersPagination(data.data.totalCount);
                    } else {
                        console.error("Failed to load users:", data.message);
                    }
                }).fail(function() {
                    console.error("Failed to load users");
                });
            }
            
            function loadOnlineUsers() {
                $.getJSON("/Dashboard/GetOnlineUsers", function(data) {
                    if (data.success) {
                        $("#onlineUsers").text(data.data.length || 0);
                    } else {
                        console.error("Failed to load online users:", data.message);
                    }
                }).fail(function() {
                    console.error("Failed to load online users");
                });
            }
            
            function displayUsers(users) {
                let tbody = $("#usersTable tbody");
                tbody.empty();
                
                if (!users || users.length === 0) {
                    tbody.append('<tr><td colspan="7" class="text-center">No users found</td></tr>');
                    return;
                }
                
                users.forEach(function(user) {
                    let statusBadge = getStatusBadge(user.isBanned, user.isActive);
                    let createdDate = new Date(user.createdAt).toLocaleDateString();
                    let lastLoginDate = user.lastLoginAt ? new Date(user.lastLoginAt).toLocaleDateString() : 'Never';
                    
                    tbody.append(`<tr data-user-id="${user.id}">
                        <td>${escapeHtml(user.username)}</td>
                        <td>${escapeHtml(user.email)}</td>
                        <td>${statusBadge}</td>
                        <td>${createdDate}</td>
                        <td>${lastLoginDate}</td>
                        <td>${user.loginCount || 0}</td>
                        <td>
                            <div class="btn-group" role="group">
                                ${getUserActionButtons(user)}
                            </div>
                        </td>
                    </tr>`);
                });
                
                // Add event handlers for user actions
                addUserActionHandlers();
            }
            
            function getStatusBadge(isBanned, isActive) {
                if (isBanned) {
                    return '<span class="badge bg-danger">Banned</span>';
                } else if (isActive) {
                    return '<span class="badge bg-success">Active</span>';
                } else {
                    return '<span class="badge bg-secondary">Inactive</span>';
                }
            }
            
            function getUserActionButtons(user) {
                let buttons = [];
                
                if (user.isBanned) {
                    buttons.push(`<button class="btn btn-sm btn-success unban-user-btn" data-user-id="${user.id}" data-username="${escapeHtml(user.username)}">Unban</button>`);
                } else {
                    buttons.push(`<button class="btn btn-sm btn-warning ban-user-btn" data-user-id="${user.id}" data-username="${escapeHtml(user.username)}">Ban</button>`);
                }
                
                buttons.push(`<button class="btn btn-sm btn-info reset-password-btn" data-user-id="${user.id}" data-username="${escapeHtml(user.username)}">Reset Password</button>`);
                buttons.push(`<button class="btn btn-sm btn-secondary audit-log-btn" data-user-id="${user.id}" data-username="${escapeHtml(user.username)}">Audit Log</button>`);
                buttons.push(`<button class="btn btn-sm btn-danger delete-user-btn" data-user-id="${user.id}" data-username="${escapeHtml(user.username)}">Delete</button>`);
                
                return buttons.join(' ');
            }
            
            function addUserActionHandlers() {
                // Ban user
                $(".ban-user-btn").click(function() {
                    const userId = $(this).data("user-id");
                    const username = $(this).data("username");
                    const reason = prompt(`Enter ban reason for ${username}:`, "Violation of terms of service");
                    
                    if (reason && confirm(`Are you sure you want to ban ${username}?`)) {
                        $.post("/Dashboard/BanUserAccount", { 
                            userId: userId, 
                            reason: reason 
                        }, function(data) {
                            if (data.success) {
                                alert(`User ${username} has been banned.`);
                                loadUserManagementData();
                            } else {
                                alert(`Failed to ban user: ${data.message}`);
                            }
                        }).fail(function() {
                            alert("Failed to ban user due to a network error.");
                        });
                    }
                });
                
                // Unban user
                $(".unban-user-btn").click(function() {
                    const userId = $(this).data("user-id");
                    const username = $(this).data("username");
                    
                    if (confirm(`Are you sure you want to unban ${username}?`)) {
                        $.post("/Dashboard/UnbanUserAccount", { 
                            userId: userId 
                        }, function(data) {
                            if (data.success) {
                                alert(`User ${username} has been unbanned.`);
                                loadUserManagementData();
                            } else {
                                alert(`Failed to unban user: ${data.message}`);
                            }
                        }).fail(function() {
                            alert("Failed to unban user due to a network error.");
                        });
                    }
                });
                
                // Force password reset
                $(".reset-password-btn").click(function() {
                    const userId = $(this).data("user-id");
                    const username = $(this).data("username");
                    
                    if (confirm(`Are you sure you want to force a password reset for ${username}?`)) {
                        $.post("/Dashboard/ForcePasswordReset", { 
                            userId: userId 
                        }, function(data) {
                            if (data.success) {
                                alert(`Password reset initiated for ${username}. They will receive an email with reset instructions.`);
                            } else {
                                alert(`Failed to initiate password reset: ${data.message}`);
                            }
                        }).fail(function() {
                            alert("Failed to initiate password reset due to a network error.");
                        });
                    }
                });
                
                // Delete user
                $(".delete-user-btn").click(function() {
                    const userId = $(this).data("user-id");
                    const username = $(this).data("username");
                    
                    if (confirm(`Are you sure you want to permanently delete ${username}? This action cannot be undone.`)) {
                        const confirmation = prompt(`Type "${username}" to confirm deletion:`, "");
                        if (confirmation === username) {
                            $.post("/Dashboard/DeleteUserAccount", { 
                                userId: userId 
                            }, function(data) {
                                if (data.success) {
                                    alert(`User ${username} has been deleted.`);
                                    loadUserManagementData();
                                } else {
                                    alert(`Failed to delete user: ${data.message}`);
                                }
                            }).fail(function() {
                                alert("Failed to delete user due to a network error.");
                            });
                        } else if (confirmation !== null) {
                            alert("Username confirmation did not match. Deletion cancelled.");
                        }
                    }
                });
                
                // View audit log
                $(".audit-log-btn").click(function() {
                    const userId = $(this).data("user-id");
                    const username = $(this).data("username");
                    
                    $.getJSON(`/Dashboard/GetUserAuditLog?userId=${userId}`, function(data) {
                        if (data.success) {
                            showAuditLogModal(username, data.data);
                        } else {
                            alert(`Failed to load audit log: ${data.message}`);
                        }
                    }).fail(function() {
                        alert("Failed to load audit log due to a network error.");
                    });
                });
            }
            
            function updateUsersPagination(totalCount) {
                totalUserPages = Math.ceil(totalCount / usersPerPage);
                
                $("#usersPageInfo").text(`Page ${currentUserPage} of ${totalUserPages} (${totalCount} users)`);
                
                $("#prevUsersPage").prop('disabled', currentUserPage <= 1);
                $("#nextUsersPage").prop('disabled', currentUserPage >= totalUserPages);
            }
            
            function filterUsersTable(searchTerm) {
                $("#usersTable tbody tr").each(function() {
                    const row = $(this);
                    const username = row.find('td:nth-child(1)').text().toLowerCase();
                    const email = row.find('td:nth-child(2)').text().toLowerCase();
                    
                    if (username.includes(searchTerm) || email.includes(searchTerm)) {
                        row.show();
                    } else {
                        row.hide();
                    }
                });
            }
            
            function showAuditLogModal(username, auditEntries) {
                let modalHtml = `
                    <div class="modal fade" id="auditLogModal" tabindex="-1">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Audit Log - ${escapeHtml(username)}</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="table-responsive">
                                        <table class="table table-sm">
                                            <thead>
                                                <tr>
                                                    <th>Timestamp</th>
                                                    <th>Action</th>
                                                    <th>Details</th>
                                                    <th>IP Address</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                `;
                
                if (auditEntries && auditEntries.length > 0) {
                    auditEntries.forEach(function(entry) {
                        let timestamp = new Date(entry.timestamp).toLocaleString();
                        modalHtml += `
                            <tr>
                                <td>${timestamp}</td>
                                <td>${escapeHtml(entry.action)}</td>
                                <td>${escapeHtml(entry.details || '')}</td>
                                <td>${escapeHtml(entry.ipAddress || '')}</td>
                            </tr>
                        `;
                    });
                } else {
                    modalHtml += '<tr><td colspan="4" class="text-center">No audit entries found</td></tr>';
                }
                
                modalHtml += `
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                // Remove existing modal if present
                $("#auditLogModal").remove();
                
                // Add modal to body
                $("body").append(modalHtml);
                
                // Show modal
                $("#auditLogModal").modal('show');
                
                // Clean up modal after hide
                $("#auditLogModal").on('hidden.bs.modal', function() {
                    $(this).remove();
                });
            }
            
            // Logging functionality
            let currentLogType = 'server';
            
            // Load logs when tabs are clicked
            $("#logTabs button").click(function() {
                const targetTab = $(this).attr("data-bs-target");
                if (targetTab) {
                    const logType = targetTab.replace('#', '').replace('-logs', '').replace('-', '');
                    currentLogType = logType;
                    loadLogs(logType);
                }
            });
            
            // Refresh logs button
            $("#refreshLogsBtn").click(function() {
                loadLogs(currentLogType);
            });
            
            // Apply server log filters
            $("#applyServerLogFilters").click(function() {
                loadLogs('server');
            });
            
            // Export logs button
            $("#exportLogsBtn").click(function() {
                exportLogs(currentLogType);
            });
            
            // Clear old logs button
            $("#clearOldLogsBtn").click(function() {
                if (confirm("Are you sure you want to clear logs older than 30 days? This action cannot be undone.")) {
                    clearOldLogs();
                }
            });
            
            function loadLogs(logType) {
                console.log("Loading logs for type:", logType);
                
                switch(logType) {
                    case 'server':
                        loadServerLogs();
                        break;
                    case 'connection':
                        loadConnectionLogs();
                        break;
                    case 'security':
                        loadSecurityLogs();
                        break;
                    case 'room':
                        loadRoomLogs();
                        break;
                }
            }
            
            function loadServerLogs() {
                const level = $("#logLevelFilter").val();
                const category = $("#logCategoryFilter").val();
                
                $.get("/Dashboard/GetServerLogs", { level: level, category: category, limit: 100 })
                    .done(function(data) {
                        if (data.success) {
                            const tbody = $("#serverLogsTableBody");
                            tbody.empty();
                            
                            $("#serverLogCount").text(data.logs.length);
                            
                            if (data.logs.length === 0) {
                                tbody.append('<tr><td colspan="6" class="text-center">No logs found</td></tr>');
                                return;
                            }
                            
                            data.logs.forEach(function(log) {
                                const levelClass = getLevelClass(log.level);
                                const row = `
                                    <tr>
                                        <td style="font-size: 12px;">${formatLogTime(log.timestamp)}</td>
                                        <td><span class="badge ${levelClass}">${log.level}</span></td>
                                        <td><small>${log.category}</small></td>
                                        <td>${escapeHtml(log.message)}</td>
                                        <td><small>${log.playerName || '-'}</small></td>
                                        <td><small>${log.ipAddress || '-'}</small></td>
                                    </tr>
                                `;
                                tbody.append(row);
                            });
                        } else {
                            $("#serverLogsTableBody").html('<tr><td colspan="6" class="text-center text-danger">Error: ' + data.message + '</td></tr>');
                        }
                    })
                    .fail(function() {
                        $("#serverLogsTableBody").html('<tr><td colspan="6" class="text-center text-danger">Failed to load logs</td></tr>');
                    });
            }
            
            function loadConnectionLogs() {
                $.get("/Dashboard/GetConnectionLogs", { limit: 100 })
                    .done(function(data) {
                        if (data.success) {
                            const tbody = $("#connectionLogsTableBody");
                            tbody.empty();
                            
                            $("#connectionLogCount").text(data.logs.length);
                            
                            if (data.logs.length === 0) {
                                tbody.append('<tr><td colspan="7" class="text-center">No logs found</td></tr>');
                                return;
                            }
                            
                            data.logs.forEach(function(log) {
                                const eventClass = getEventClass(log.eventType);
                                const tlsBadge = log.usedTls ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-secondary">No</span>';
                                const duration = log.duration ? log.duration + 's' : '-';
                                
                                const row = `
                                    <tr>
                                        <td style="font-size: 12px;">${formatLogTime(log.timestamp)}</td>
                                        <td><span class="badge ${eventClass}">${log.eventType}</span></td>
                                        <td><small>${log.playerName || 'Anonymous'}</small></td>
                                        <td><small>${log.ipAddress}</small></td>
                                        <td><small>${log.connectionType}</small></td>
                                        <td>${tlsBadge}</td>
                                        <td><small>${duration}</small></td>
                                    </tr>
                                `;
                                tbody.append(row);
                            });
                        } else {
                            $("#connectionLogsTableBody").html('<tr><td colspan="7" class="text-center text-danger">Error: ' + data.message + '</td></tr>');
                        }
                    })
                    .fail(function() {
                        $("#connectionLogsTableBody").html('<tr><td colspan="7" class="text-center text-danger">Failed to load logs</td></tr>');
                    });
            }
            
            function loadSecurityLogs() {
                $.get("/Dashboard/GetSecurityLogs", { limit: 100 })
                    .done(function(data) {
                        if (data.success) {
                            const tbody = $("#securityLogsTableBody");
                            tbody.empty();
                            
                            $("#securityLogCount").text(data.logs.length);
                            
                            if (data.logs.length === 0) {
                                tbody.append('<tr><td colspan="7" class="text-center">No logs found</td></tr>');
                                return;
                            }
                            
                            data.logs.forEach(function(log) {
                                const severityClass = getSeverityClass(log.severity);
                                const statusBadge = log.isResolved ? 
                                    '<span class="badge bg-success">Resolved</span>' : 
                                    '<span class="badge bg-warning">Open</span>';
                                
                                const row = `
                                    <tr>
                                        <td style="font-size: 12px;">${formatLogTime(log.timestamp)}</td>
                                        <td><small>${log.eventType}</small></td>
                                        <td><span class="badge ${severityClass}">Level ${log.severity}</span></td>
                                        <td><small>${log.ipAddress}</small></td>
                                        <td><small>${log.playerName || '-'}</small></td>
                                        <td>${escapeHtml(log.description)}</td>
                                        <td>${statusBadge}</td>
                                    </tr>
                                `;
                                tbody.append(row);
                            });
                        } else {
                            $("#securityLogsTableBody").html('<tr><td colspan="7" class="text-center text-danger">Error: ' + data.message + '</td></tr>');
                        }
                    })
                    .fail(function() {
                        $("#securityLogsTableBody").html('<tr><td colspan="7" class="text-center text-danger">Failed to load logs</td></tr>');
                    });
            }
            
            function loadRoomLogs() {
                $.get("/Dashboard/GetRoomActivityLogs", { limit: 100 })
                    .done(function(data) {
                        if (data.success) {
                            const tbody = $("#roomLogsTableBody");
                            tbody.empty();
                            
                            $("#roomLogCount").text(data.logs.length);
                            
                            if (data.logs.length === 0) {
                                tbody.append('<tr><td colspan="6" class="text-center">No logs found</td></tr>');
                                return;
                            }
                            
                            data.logs.forEach(function(log) {
                                const eventClass = getRoomEventClass(log.eventType);
                                
                                const row = `
                                    <tr>
                                        <td style="font-size: 12px;">${formatLogTime(log.timestamp)}</td>
                                        <td><small>${escapeHtml(log.roomName)}</small></td>
                                        <td><span class="badge ${eventClass}">${log.eventType}</span></td>
                                        <td><small>${log.playerName || '-'}</small></td>
                                        <td><small>${log.playerCount}</small></td>
                                        <td><small>${log.details || '-'}</small></td>
                                    </tr>
                                `;
                                tbody.append(row);
                            });
                        } else {
                            $("#roomLogsTableBody").html('<tr><td colspan="6" class="text-center text-danger">Error: ' + data.message + '</td></tr>');
                        }
                    })
                    .fail(function() {
                        $("#roomLogsTableBody").html('<tr><td colspan="6" class="text-center text-danger">Failed to load logs</td></tr>');
                    });
            }
            
            function showExportModal() {
                $('#exportLogType').val(currentLogType);
                $('#exportModal').modal('show');
            }
            
            function showClearLogsModal() {
                $('#clearLogType').val(currentLogType);
                $('#clearLogsModal').modal('show');
            }
            
            function exportLogs() {
                const logType = $('#exportLogType').val();
                const format = $('#exportFormat').val();
                const dateFrom = $('#exportDateFrom').val();
                const dateTo = $('#exportDateTo').val();
                
                const params = new URLSearchParams({
                    logType: logType,
                    format: format
                });
                
                if (dateFrom) params.append('dateFrom', dateFrom);
                if (dateTo) params.append('dateTo', dateTo);
                
                // Create a form and submit it to trigger download
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/Dashboard/ExportLogs';
                form.style.display = 'none';
                
                for (const [key, value] of params) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = key;
                    input.value = value;
                    form.appendChild(input);
                }
                
                document.body.appendChild(form);
                form.submit();
                document.body.removeChild(form);
                
                $('#exportModal').modal('hide');
            }
            
            function clearOldLogs() {
                const logType = $('#clearLogType').val();
                const olderThan = $('#clearOlderThan').val();
                
                $.post("/Dashboard/ClearLogs", {
                    logType: logType,
                    olderThan: olderThan
                })
                .done(function(data) {
                    if (data.success) {
                        alert(`Successfully cleared ${data.deletedCount} log entries`);
                        loadLogs(currentLogType);
                        $('#clearLogsModal').modal('hide');
                    } else {
                        alert("Failed to clear logs: " + data.message);
                    }
                })
                .fail(function() {
                    alert("Failed to clear logs due to network error");
                });
            }
            
            // Helper functions for log styling
            function getLevelClass(level) {
                switch(level) {
                    case 'Debug': return 'bg-secondary';
                    case 'Info': return 'bg-info';
                    case 'Warning': return 'bg-warning';
                    case 'Error': return 'bg-danger';
                    case 'Critical': return 'bg-dark';
                    default: return 'bg-light text-dark';
                }
            }
            
            function getEventClass(eventType) {
                switch(eventType) {
                    case 'Connect': return 'bg-success';
                    case 'Disconnect': return 'bg-warning';
                    case 'Timeout': return 'bg-danger';
                    default: return 'bg-secondary';
                }
            }
            
            function getSeverityClass(severity) {
                switch(severity) {
                    case 1: return 'bg-info';
                    case 2: return 'bg-warning';
                    case 3: return 'bg-danger';
                    case 4: return 'bg-dark';
                    default: return 'bg-secondary';
                }
            }
            
            function getRoomEventClass(eventType) {
                switch(eventType) {
                    case 'Created': return 'bg-primary';
                    case 'PlayerJoined': return 'bg-success';
                    case 'PlayerLeft': return 'bg-warning';
                    case 'GameStarted': return 'bg-info';
                    case 'GameEnded': return 'bg-secondary';
                    default: return 'bg-light text-dark';
                }
            }
            
            function formatLogTime(timestamp) {
                const date = new Date(timestamp);
                return date.toLocaleString();
            }
            
            function escapeHtml(text) {
                if (!text) return '';
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
            
            // Load initial logs
            loadLogs('server');
        });
    </script>

    <!-- Export Logs Modal -->
    <div class="modal fade" id="exportModal" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exportModalLabel">Export Logs</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="exportLogType" class="form-label">Log Type</label>
                            <select class="form-select" id="exportLogType">
                                <option value="server">Server Logs</option>
                                <option value="connection">Connection Logs</option>
                                <option value="security">Security Logs</option>
                                <option value="room">Room Activity Logs</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="exportFormat" class="form-label">Format</label>
                            <select class="form-select" id="exportFormat">
                                <option value="csv">CSV</option>
                                <option value="json">JSON</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="exportDateFrom" class="form-label">From Date (optional)</label>
                            <input type="date" class="form-control" id="exportDateFrom">
                        </div>
                        <div class="mb-3">
                            <label for="exportDateTo" class="form-label">To Date (optional)</label>
                            <input type="date" class="form-control" id="exportDateTo">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="exportLogs()">Export</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Clear Logs Modal -->
    <div class="modal fade" id="clearLogsModal" tabindex="-1" aria-labelledby="clearLogsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="clearLogsModalLabel">Clear Old Logs</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <strong>Warning:</strong> This action cannot be undone. Logs will be permanently deleted.
                    </div>
                    <form>
                        <div class="mb-3">
                            <label for="clearLogType" class="form-label">Log Type</label>
                            <select class="form-select" id="clearLogType">
                                <option value="server">Server Logs</option>
                                <option value="connection">Connection Logs</option>
                                <option value="security">Security Logs</option>
                                <option value="room">Room Activity Logs</option>
                                <option value="all">All Log Types</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="clearOlderThan" class="form-label">Clear logs older than</label>
                            <input type="date" class="form-control" id="clearOlderThan" placeholder="Leave empty for 30 days">
                            <div class="form-text">Leave empty to clear logs older than 30 days</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" onclick="clearOldLogs()">Clear Logs</button>
                </div>
            </div>
        </div>
    </div>
</body>
</html>