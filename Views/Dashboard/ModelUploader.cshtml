@{
    ViewData["Title"] = "3D Model Uploader";
}

<div class="row">
    <div class="col-md-12">
        <h2>3D Model Uploader</h2>
        <p class="lead">Upload 3D models for the racing track visualization.</p>
        
        <div class="card">
            <div class="card-header">
                <h5>Upload New Model</h5>
            </div>
            <div class="card-body">
                <form id="upload-form" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="model-file" class="form-label">Select 3D Model File</label>
                        <input type="file" class="form-control" id="model-file" name="file" accept=".glb,.gltf,.obj,.fbx">
                        <div class="form-text">Supported formats: GLB, GLTF, OBJ, FBX</div>
                    </div>
                    <button type="submit" class="btn btn-primary">Upload</button>
                </form>
                
                <div id="upload-status" class="mt-3" style="display: none;"></div>
                
                <div class="progress mt-3" style="display: none;">
                    <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                </div>
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-header">
                <h5>Available Models</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Size</th>
                                <th>Last Modified</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="model-list">
                            <tr>
                                <td colspan="4" class="text-center">Loading...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="preview-modal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Model Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="preview-container" style="width: 100%; height: 400px;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Required libraries for 3D rendering -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/loaders/OBJLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/loaders/FBXLoader.js"></script>
    
    <script>
        // Load model list on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadModelList();
            
            // Set up form submission
            document.getElementById('upload-form').addEventListener('submit', function(e) {
                e.preventDefault();
                uploadModel();
            });
        });
        
        // Load the list of available models
        async function loadModelList() {
            try {
                const response = await fetch('/api/ModelUploader/list');
                
                if (response.ok) {
                    const models = await response.json();
                    const modelListElement = document.getElementById('model-list');
                    
                    if (models.length === 0) {
                        modelListElement.innerHTML = '<tr><td colspan="4" class="text-center">No models available</td></tr>';
                        return;
                    }
                    
                    modelListElement.innerHTML = '';
                    
                    models.forEach(model => {
                        const row = document.createElement('tr');
                        
                        // Name column with link
                        const nameCell = document.createElement('td');
                        const nameLink = document.createElement('a');
                        nameLink.href = model.url;
                        nameLink.textContent = model.name;
                        nameLink.target = '_blank';
                        nameCell.appendChild(nameLink);
                        row.appendChild(nameCell);
                        
                        // Size column
                        const sizeCell = document.createElement('td');
                        sizeCell.textContent = formatFileSize(model.size);
                        row.appendChild(sizeCell);
                        
                        // Last modified column
                        const dateCell = document.createElement('td');
                        dateCell.textContent = new Date(model.lastModified).toLocaleString();
                        row.appendChild(dateCell);
                        
                        // Actions column
                        const actionsCell = document.createElement('td');
                        
                        // Preview button
                        const previewBtn = document.createElement('button');
                        previewBtn.className = 'btn btn-sm btn-outline-primary me-2';
                        previewBtn.textContent = 'Preview';
                        previewBtn.addEventListener('click', () => {
                            openPreviewModal(model.url);
                        });
                        actionsCell.appendChild(previewBtn);
                        
                        // Delete button
                        const deleteBtn = document.createElement('button');
                        deleteBtn.className = 'btn btn-sm btn-outline-danger';
                        deleteBtn.textContent = 'Delete';
                        deleteBtn.addEventListener('click', () => {
                            if (confirm(`Are you sure you want to delete ${model.name}?`)) {
                                deleteModel(model.name);
                            }
                        });
                        actionsCell.appendChild(deleteBtn);
                        
                        row.appendChild(actionsCell);
                        
                        modelListElement.appendChild(row);
                    });
                } else {
                    console.error('Failed to load model list:', response.statusText);
                }
            } catch (err) {
                console.error('Error loading model list:', err);
            }
        }
        
        // Upload model file
        async function uploadModel() {
            const fileInput = document.getElementById('model-file');
            
            if (!fileInput.files || fileInput.files.length === 0) {
                showUploadStatus('error', 'Please select a file to upload.');
                return;
            }
            
            const file = fileInput.files[0];
            const formData = new FormData();
            formData.append('file', file);
            
            // Show progress bar
            const progressBar = document.querySelector('.progress');
            const progressBarInner = document.querySelector('.progress-bar');
            progressBar.style.display = 'block';
            
            try {
                const response = await fetch('/api/ModelUploader/upload', {
                    method: 'POST',
                    body: formData,
                    // Track upload progress
                    onUploadProgress: (progressEvent) => {
                        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                        progressBarInner.style.width = percentCompleted + '%';
                        progressBarInner.textContent = percentCompleted + '%';
                        progressBarInner.setAttribute('aria-valuenow', percentCompleted);
                    }
                });
                
                // Hide progress bar
                progressBar.style.display = 'none';
                
                if (response.ok) {
                    const result = await response.json();
                    showUploadStatus('success', 'File uploaded successfully.');
                    
                    // Clear file input and reload model list
                    fileInput.value = '';
                    loadModelList();
                } else {
                    const error = await response.json();
                    showUploadStatus('error', 'Upload failed: ' + (error.error || response.statusText));
                }
            } catch (err) {
                progressBar.style.display = 'none';
                showUploadStatus('error', 'Upload failed: ' + err.message);
            }
        }
        
        // Delete model file
        async function deleteModel(filename) {
            try {
                const response = await fetch(`/api/ModelUploader/${encodeURIComponent(filename)}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    showUploadStatus('success', 'File deleted successfully.');
                    loadModelList();
                } else {
                    const error = await response.json();
                    showUploadStatus('error', 'Delete failed: ' + (error.error || response.statusText));
                }
            } catch (err) {
                showUploadStatus('error', 'Delete failed: ' + err.message);
            }
        }
        
        // Open preview modal
        function openPreviewModal(modelUrl) {
            const modal = new bootstrap.Modal(document.getElementById('preview-modal'));
            modal.show();
            
            // Initialize preview after modal is shown
            document.getElementById('preview-modal').addEventListener('shown.bs.modal', function () {
                initModelPreview('preview-container', modelUrl);
            });
            
            // Clean up when modal is hidden
            document.getElementById('preview-modal').addEventListener('hidden.bs.modal', function () {
                cleanupModelPreview();
            });
        }
        
        // Initialize 3D preview of a model
        let previewScene, previewCamera, previewRenderer, previewControls, previewModel, previewAnimationFrame;
        
        function initModelPreview(containerId, modelUrl) {
            const container = document.getElementById(containerId);
            const width = container.clientWidth;
            const height = container.clientHeight;
            
            // Create scene
            previewScene = new THREE.Scene();
            previewScene.background = new THREE.Color(0x333333);
            
            // Add lighting
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
            previewScene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(0, 10, 10);
            previewScene.add(directionalLight);
            
            // Camera setup
            previewCamera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
            previewCamera.position.set(0, 5, 10);
            previewCamera.lookAt(0, 0, 0);
            
            // Grid helper
            const gridHelper = new THREE.GridHelper(20, 20);
            previewScene.add(gridHelper);
            
            // Renderer setup
            previewRenderer = new THREE.WebGLRenderer({ antialias: true });
            previewRenderer.setSize(width, height);
            container.innerHTML = '';
            container.appendChild(previewRenderer.domElement);
            
            // Add orbit controls
            previewControls = new THREE.OrbitControls(previewCamera, previewRenderer.domElement);
            previewControls.enableDamping = true;
            previewControls.dampingFactor = 0.05;
            
            // Load model
            loadModelForPreview(modelUrl);
            
            // Start animation loop
            animatePreview();
        }
        
        // Load 3D model for preview
        function loadModelForPreview(modelUrl) {
            if (modelUrl.endsWith('.glb') || modelUrl.endsWith('.gltf')) {
                const loader = new THREE.GLTFLoader();
                loader.load(modelUrl, (gltf) => {
                    previewModel = gltf.scene;
                    centerAndScaleModel(previewModel);
                    previewScene.add(previewModel);
                }, undefined, (error) => {
                    console.error('Error loading model:', error);
                });
            } else if (modelUrl.endsWith('.obj')) {
                const loader = new THREE.OBJLoader();
                loader.load(modelUrl, (obj) => {
                    previewModel = obj;
                    centerAndScaleModel(previewModel);
                    previewScene.add(previewModel);
                }, undefined, (error) => {
                    console.error('Error loading model:', error);
                });
            } else if (modelUrl.endsWith('.fbx')) {
                const loader = new THREE.FBXLoader();
                loader.load(modelUrl, (obj) => {
                    previewModel = obj;
                    centerAndScaleModel(previewModel);
                    previewScene.add(previewModel);
                }, undefined, (error) => {
                    console.error('Error loading model:', error);
                });
            }
        }
        
        // Center and scale model to fit view
        function centerAndScaleModel(model) {
            // Create bounding box
            const box = new THREE.Box3().setFromObject(model);
            const size = box.getSize(new THREE.Vector3());
            const center = box.getCenter(new THREE.Vector3());
            
            // If model is too large, scale it down
            const maxDim = Math.max(size.x, size.y, size.z);
            if (maxDim > 10) {
                const scale = 10 / maxDim;
                model.scale.set(scale, scale, scale);
            }
            
            // Center model at origin
            model.position.x = -center.x;
            model.position.y = -center.y;
            model.position.z = -center.z;
        }
        
        // Animation loop for preview
        function animatePreview() {
            previewAnimationFrame = requestAnimationFrame(animatePreview);
            previewControls.update();
            previewRenderer.render(previewScene, previewCamera);
        }
        
        // Clean up preview when modal is closed
        function cleanupModelPreview() {
            if (previewAnimationFrame) {
                cancelAnimationFrame(previewAnimationFrame);
            }
            
            // Clear scene
            if (previewScene) {
                while(previewScene.children.length > 0){ 
                    previewScene.remove(previewScene.children[0]); 
                }
            }
            
            previewScene = null;
            previewCamera = null;
            previewRenderer = null;
            previewControls = null;
            previewModel = null;
        }
        
        // Show upload status message
        function showUploadStatus(type, message) {
            const statusElement = document.getElementById('upload-status');
            statusElement.style.display = 'block';
            statusElement.className = 'alert alert-' + (type === 'error' ? 'danger' : 'success');
            statusElement.textContent = message;
            
            // Hide the message after 5 seconds
            setTimeout(() => {
                statusElement.style.display = 'none';
            }, 5000);
        }
        
        // Format file size in human-readable format
        function formatFileSize(bytes) {
            if (bytes < 1024) return bytes + ' bytes';
            else if (bytes < 1048576) return (bytes / 1024).toFixed(2) + ' KB';
            else return (bytes / 1048576).toFixed(2) + ' MB';
        }
    </script>
}